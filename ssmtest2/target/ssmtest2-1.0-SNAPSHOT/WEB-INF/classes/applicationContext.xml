<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- 不扫描已由springmvc扫描的controller注解 -->
	<context:component-scan base-package="com.mytest.crud">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- 引入properties配置文件 -->
	<context:property-placeholder location="classpath:dbconfig.properties"/>
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<property name="driverClassName" value="${jdbc.driver}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean>
	
	<!-- 和MyBatis整合 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<property name="dataSource" ref="dataSource"></property>
		<property name="mapperLocations" value="classpath:mapper/*.xml"></property>
	</bean>

	<!--配置扫描器，将 MyBatis 接口的实现加入到 IOC 容器中-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!--扫描所有的 DAO 接口的实现，加入到 IOC 容器中-->
		<property name="basePackage" value="com.mytest.crud.dao"/>
	</bean>

	<!--配置一个可以执行批量操作的 sqlSession-->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>
		<constructor-arg name="executorType" value="BATCH"/>
	</bean>

	<!-- 配置事务控制 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!--开启基于注解的事务，使用 XML 配置形式的事务（比较主要的事务都用配置式）-->
	<aop:config>
		<!--切入点表达式-->
		<aop:pointcut id="txPoint" expression="execution(* com.mytest.crud.service..*(..))"/>
		<!--配置事务增强-->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
	</aop:config>
	<aop:aspectj-autoproxy  proxy-target-class="true"/>

	<!--配置事务增强，事务如何增强-->
	<tx:advice id="txAdvice">
		<tx:attributes>
			<!--
             * 代表所有方法都是事务方法
             get* 代表以get开始的所有方法
             -->
			<tx:method name="*"/>
			<tx:method name="get*" read-only="true"/>
		</tx:attributes>
	</tx:advice>


</beans>
